//the final code is ke baad agr tm ne mjhe kuch edit krne ka kaha na bata rai hoo bacho ge nai tm 

#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include <curl/curl.h>
#include <sstream>
#include <ctime>
#include "json.hpp"
using namespace std;
using json = nlohmann::json;

// Utility function
string toLower(const string& str) {
    string lowerStr = str;
    transform(lowerStr.begin(), lowerStr.end(), lowerStr.begin(), ::tolower);
    return lowerStr;
}

// History Logger class
class HistoryLogger {
private:
    const string filename = "weather_history.txt";

public:
    void logEntry(const string& userInput, const string& forecastResult) {
        ofstream outFile(filename, ios::app);
        if (outFile.is_open()) {
            time_t now = time(0);
            tm* localTime = localtime(&now);
            char timeStr[80];
            strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M:%S", localTime);
            
            outFile << "[" << timeStr << "]\n";
            outFile << "User Input: " << userInput << "\n";
            outFile << "Forecast Result:\n" << forecastResult << "\n";
            outFile << "----------------------------------------\n";
            outFile.close();
        } else {
            cerr << "Error: Unable to open history file!" << endl;
        }
    }
};

// City class
class City {
private:
    string cityName, countryName;
    int postalCode;

public:
    City(string city = "", string country = "", int code = 0)
        : cityName(city), countryName(country), postalCode(code) {}

    string getcityName() { return cityName; }
    string getcountryName() { return countryName; }
    int getpostalCode() { return postalCode; }

    void displayCity() {
        cout << "City: " << cityName << ", Country: " << countryName << " Code: " << postalCode << endl;
    }
};

// Weather class
class Weather {
private:
    string weatherCondition, year, month, day;
    float currentTemperature, windSpeed;
    int humidityPercentage;

    vector<string> hours;
    vector<string> hourConditions;
    vector<float> hourTemperatures;
    vector<int> hourHumidities;
    vector<float> hourWinds;

public:
    Weather(string weather = "", float temp = 0.0, int humidity = 0, float wind = 0.0,
            string _year = "", string _month = "", string _day = "")
        : weatherCondition(weather), currentTemperature(temp), humidityPercentage(humidity),
          windSpeed(wind), year(_year), month(_month), day(_day) {}

    string getdateOfForecast() {
        return year + "-" + month + "-" + day;
    }

    void displayWeather() {
        cout << "Date: " << day << "/" << month << "/" << year << endl;
        cout << "Condition: " << weatherCondition << endl;
        cout << "Temperature: " << currentTemperature << "°C" << endl;
        cout << "Humidity: " << humidityPercentage << "%" << endl;
        cout << "Wind Speed: " << windSpeed << " km/h" << endl;
        cout << "-----------------------------" << endl;
    }

    void addHourlyData(string time, string condition, float temp, int humidity, float wind) {
        hours.push_back(time);
        hourConditions.push_back(condition);
        hourTemperatures.push_back(temp);
        hourHumidities.push_back(humidity);
        hourWinds.push_back(wind);
    }

    void displayHourlyForecast() {
        cout << "\nHOURLY FORECAST:\n------------------------\n";
        for (size_t i = 0; i < hours.size(); i++) {
            cout << "Time: " << hours[i] << endl;
            cout << "Condition: " << hourConditions[i] << endl;
            cout << "Temperature: " << hourTemperatures[i] << "°C" << endl;
            cout << "Humidity: " << hourHumidities[i] << "%" << endl;
            cout << "Wind Speed: " << hourWinds[i] << " km/h" << endl;
            cout << "-----------------------------\n";
        }
    }
};

// Forecast class
class Forecast {
private:
    City city;
    vector<Weather> weather;

public:
    Forecast(string cityName = "", string countryName = "")
        : city(cityName, countryName) {}

    void addWeather(const Weather& w) {
        weather.push_back(w);
    }

    void displayForecastByWeek() {
        cout << "\nForecast for " << city.getcityName() << ", " << city.getcountryName() << ":\n";
        cout << "=============================\n";
        for (int i = 0; i < weather.size(); i++) {
            cout << "Day " << (i + 1) << ":\n";
            weather[i].displayWeather();
        }
    }

    void displayForecastByDate(string year, string month, string day) {
        bool found = false;
        string inputDate = year + "-" + month + "-" + day;

        for (Weather& w : weather) {
            if (w.getdateOfForecast() == inputDate) {
                cout << "\nForecast for " << city.getcityName() << ", " << city.getcountryName() << ":\n";
                w.displayWeather();
                found = true;
                break;
            }
        }

        if (!found) {
            cout << "No forecast available for " << day << "/" << month << "/" << year
                 << " in " << city.getcityName() << ", " << city.getcountryName() << "." << endl;
        }
    }

    void displayHourlyForecast(string year, string month, string day) {
        string inputDate = year + "-" + month + "-" + day;
        bool found = false;

        for (Weather& w : weather) {
            if (w.getdateOfForecast() == inputDate) {
                cout << "\nHourly Forecast for " << city.getcityName() << ", " << city.getcountryName() << ":\n";
                w.displayHourlyForecast();
                found = true;
                break;
            }
        }

        if (!found) {
            cout << "No hourly forecast available for " << day << "/" << month << "/" << year
                 << " in " << city.getcityName() << ", " << city.getcountryName() << "." << endl;
        }
    }
};

// Curl callback
static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

// WeatherAPI class
class WeatherAPI {
public:
    static string fetchWeatherData(string& cityName, string& countryName) {
        string apiKey = "a8ad7a0710ba4c18add144233251304"; // Your API key here
        string url = "http://api.weatherapi.com/v1/forecast.json?key=" + apiKey + "&q=" + cityName + "," + countryName + "&days=7";

        CURL* curl = curl_easy_init();
        string response;

        if (curl) {
            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
            CURLcode res = curl_easy_perform(curl);
            curl_easy_cleanup(curl);

            if (res != CURLE_OK) {
                cout << "Error: " << curl_easy_strerror(res) << endl;
                return "";
            }

            return response;
        }

        return "";
    }
};

// WeatherSystem class
class WeatherSystem {
private:
    HistoryLogger logger;

public:
    Forecast loadData(string cityName, string countryName) {
        Forecast forecast(cityName, countryName);

        string response = WeatherAPI::fetchWeatherData(cityName, countryName);

        if (response.empty()) {
            return forecast;
        }

        try {
            json data = json::parse(response);

            string inputCityLower = toLower(cityName);
            string inputCountryLower = toLower(countryName);

            string actualCity = data["location"]["name"];
            string actualCountry = data["location"]["country"];

            string actualCityLower = toLower(actualCity);
            string actualCountryLower = toLower(actualCountry);

            if (actualCityLower != inputCityLower || actualCountryLower != inputCountryLower) {
                cout << "\n \"" << cityName << "\" was not recognized as a city in \"" << countryName << "\".\n";
                cout << "Please check the spelling and try again.\n" << endl;
                exit(1);
            }

            auto days = data["forecast"]["forecastday"];
            for (auto& day : days) {
                string date = day["date"];
                string year = date.substr(0, 4);
                string month = date.substr(5, 2);
                string dayPart = date.substr(8, 2);

                string condition = day["day"]["condition"]["text"];
                float temp = day["day"]["avgtemp_c"];
                int humidity = day["day"]["avghumidity"];
                float wind = day["day"]["maxwind_kph"];

                Weather w(condition, temp, humidity, wind, year, month, dayPart);

                for (auto& hour : day["hour"]) {
                    string time = hour["time"];
                    string h_condition = hour["condition"]["text"];
                    float h_temp = hour["temp_c"];
                    int h_humidity = hour["humidity"];
                    float h_wind = hour["wind_kph"];

                    w.addHourlyData(time, h_condition, h_temp, h_humidity, h_wind);
                }

                forecast.addWeather(w);
            }

        } catch (...) {
            cout << "Error parsing JSON data!" << endl;
        }

        return forecast;
    }

    void logHistory(const string& userInput, const string& forecastResult) {
        logger.logEntry(userInput, forecastResult);
    }
};

// Function to capture cout output
string captureOutput(void (Forecast::*func)(), Forecast& forecast) {
    stringstream buffer;
    streambuf* old = cout.rdbuf(buffer.rdbuf());
    (forecast.*func)();
    cout.rdbuf(old);
    return buffer.str();
}

string captureOutput(void (Forecast::*func)(string, string, string), Forecast& forecast, string y, string m, string d) {
    stringstream buffer;
    streambuf* old = cout.rdbuf(buffer.rdbuf());
    (forecast.*func)(y, m, d);
    cout.rdbuf(old);
    return buffer.str();
}

// Main function
int main() {
    cout << "==============================================" << endl;
    cout << "        Welcome to Weather Forecast       " << endl;
    cout << "  Plan your week with confidence and clarity!  " << endl;
    cout << "==============================================" << endl;

    string countryName, cityName;
    cout << "\nEnter Country Name: ";
    getline(cin, countryName);
    cout << "Enter City Name: ";
    getline(cin, cityName);

    string userInput = "City: " + cityName + ", Country: " + countryName;
    WeatherSystem system1;
    Forecast f1 = system1.loadData(cityName, countryName);

    cout << "\nDo you want the forecast for:\n";
    cout << "1. Whole Week\n";
    cout << "2. Specific Day\n";
    cout << "3. Hourly Forecast\n";
    cout << "Enter your choice (1, 2 or 3): ";
    int choice;
    cin >> choice;
    cin.ignore();

    string forecastResult;
    if (choice == 1) {
        forecastResult = captureOutput(&Forecast::displayForecastByWeek, f1);
        f1.displayForecastByWeek();
    } else if (choice == 2) {
        string year, month, day;
        cout << "Enter Year (YYYY): ";
        getline(cin, year);
        cout << "Enter Month (MM): ";
        getline(cin, month);
        cout << "Enter Day (DD): ";
        getline(cin, day);
        forecastResult = captureOutput(&Forecast::displayForecastByDate, f1, year, month, day);
        f1.displayForecastByDate(year, month, day);
    } else if (choice == 3) {
        string year, month, day;
        cout << "Enter Year (YYYY): ";
        getline(cin, year);
        cout << "Enter Month (MM): ";
        getline(cin, month);
        cout << "Enter Day (DD): ";
        getline(cin, day);
        forecastResult = captureOutput(&Forecast::displayHourlyForecast, f1, year, month, day);
        f1.displayHourlyForecast(year, month, day);
    } else {
        cout << "Invalid choice. Please restart and choose 1, 2 or 3." << endl;
        return 1;
    }

    system1.logHistory(userInput, forecastResult);
    cout << "\nYour forecast has been saved to weather_history.txt\n";

    return 0;
}
